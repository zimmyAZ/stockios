import 'package:flutter/material.dart';import 'package:charts_flutter/flutter.dart' as charts;import 'package:http/http.dart' as http;import 'package:shared_preferences/shared_preferences.dart';import 'dart:convert';import 'dart:async';import 'stockpage.dart';import 'budgetpage.dart';class recurring_item {  String _name;  double _amount;  String _date_started;  int _repeat_day;  recurring_item(this._name, this._amount, this._date_started,      this._repeat_day);}class RecurringPage extends StatefulWidget {  RecurringPage({Key key, this.title}) : super(key: key);  final String title;  @override  _MyRecurringState createState() => new _MyRecurringState();}class _MyRecurringState extends State<RecurringPage> {/*======================Variables========================*/  List<recurring_item> recurring_list = [];  int _currentIndex = 2;  List<String> dummy_names = ['Spotify', 'WoW', 'HumbleBundle'];  List<double> dummy_amounts = [15.00, 15.00, 12.00];  List<String> dummy_dates_started = ['7-9-16', '12-20-17', '8-12-18'];  List<int> dummy_repeat_days = [20, 15, 12];/*=======================================================*//*======================Functions========================*/  _load_dummy() {    List<recurring_item> temp_recurring_list = [];    for (int i = 0; i < dummy_names.length; i++) {      temp_recurring_list.add(          dummy_names[i], dummy_amounts[i], dummy_dates_started[i],          dummy_repeat_days[i]);    }    setState(() {      recurring_list = temp_recurring_list;    });  }  _load_saved() async {    List<String> temp_names = [];    List<String> temp_amounts = [];    List<String> temp_dates_started = [];    List<String> temp_repeat_days = [];    List<recurring_item> temp_recurring_list = [];    SharedPreferences prefs = await SharedPreferences.getInstance();    prefs = await SharedPreferences.getInstance();    if ((prefs.getStringList('recurring_names') != null)) {      temp_names = prefs.getStringList('recurring_names');      temp_amounts = prefs.getStringList('recurring_amounts');      temp_dates_started = prefs.getString('recurring_dates_started');      temp_repeat_days = prefs.getString('recurring_repeat_days')      for (int i = 0; i < temp_names.length; i++) {        temp_reccuring_list.add(            temp_names[i], temp_amounts[i], temp_dates_started[i],            temp_repeat_days[i]);      }      setState(() {        recurring_list = temp_recurring_list;      });    }    else {      load_dummy();    }  }/*=======================================================*//*======================UI======================*/  void onTabTapped(int index) {    if (index == 0) {      Navigator.push(context, new MaterialPageRoute(          builder: (context) => new BudgetPage()));    }    if (index == 1) {      Navigator.push(context, new MaterialPageRoute(          builder: (context) => new StockPage()));    }    if (index == 2) {      print('Do Nothing.');    }    setState(() {      _currentIndex = index;    });  }  _top_app_bar() {    final appBar = AppBar(      title: const Text('Recurring Charges'),      backgroundColor: Colors.red,//      actions: <Widget>[//        new IconButton(icon: new Icon(Icons.refresh), onPressed: _refresh)//      ],    );    return appBar;  }  _body() {    final body = Container(      width: MediaQuery          .of(context)          .size          .width,      padding: EdgeInsets.all(4.0),      decoration: BoxDecoration(        gradient: LinearGradient(colors: [          Colors.black45,          Colors.black45,        ]),      ),      child: ListView(        scrollDirection: Axis.vertical,        children: <Widget>[],      ),    );    return body;  }  _bottom_app_bar() {    final bottom_menu = new BottomNavigationBar(      onTap: onTabTapped, // new      currentIndex: _currentIndex, // new      items: [        new BottomNavigationBarItem(          icon: Icon(Icons.credit_card),          title: Text('Budget'),        ),        new BottomNavigationBarItem(          icon: Icon(Icons.show_chart),          title: Text('Stocks'),        ),        new BottomNavigationBarItem(          icon: Icon(Icons.refresh),          title: Text('Recurring'),        )      ],    );    return bottom_menu;  }/*==============================================*/  @override  void initState() {  }  @override  Widget build(BuildContext context) {    return Scaffold(      appBar: _top_app_bar(),      bottomNavigationBar: _bottom_app_bar(),//      floatingActionButton: _add_button(),      body: _body(),    );  }}